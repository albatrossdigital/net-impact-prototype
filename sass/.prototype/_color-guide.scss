@import "singularitygs";

//////////////////////////////
// Colors
//////////////////////////////
$black: #161616;
$white: #fefefe;
$gray: mix($black, $white);
$cs-primary: #fdb252;

//////////////////////////////
// Color Stacks
//
// We can utilize [Color Schemer](https://github.com/scottkellum/color-schemer)
//   to build us awesome color guides.
//////////////////////////////
// Primary color, can be any color you can use in CSS, plus CMYK from Color Schemer
$cs-scheme:             accented-analogic;
// Options: mono, complement, triad, tetrad, analogic, accented-analogic
$cs-hue-offset:         42;
// Options: 0-100;
$cs-brightness-offset:  10;
// Options: 0-100;
$cs-color-model:        ryb;
// Options: rgb, ryb

$black-tints:      tint-stack($black);
$primary-tints:    tint-stack(cs-primary());
$secondary-tints:  tint-stack(cs-secondary());
$tertiary-tints:   tint-stack(cs-tertiary());
$quaternary-tints:   tint-stack(cs-quadrary());
$primary-shades:   shade-stack(cs-primary());
$secondary-shades: shade-stack(cs-secondary());
$tertiary-shades:  shade-stack(cs-tertiary());
$quaternary-shades:  shade-stack(cs-quadrary());

$cs-secondary: cs-secondary();

@debug $quaternary-shades;

// link colors
$cs-link-normal: nth($quaternary-shades, 2);
$cs-link-hover: nth($quaternary-shades, 3);
$cs-link-active: nth($quaternary-tints, 2);
$cs-link-visited: nth($quaternary-shades, 4);
$cs-link-focus: nth($quaternary-shades, 4);
$cs-link-border-normal: nth($quaternary-shades, 2);
$cs-link-border-hover: nth($quaternary-shades, 3);
$cs-link-border-active: nth($quaternary-tints, 2);
$cs-link-border-visited: nth($quaternary-shades, 4);
$cs-link-border-focus: nth($quaternary-shades, 4);

//////////////////////////////
// Background Colors
//////////////////////////////
$cs-background: $white;

//////////////////////////////
// Text Colors
//////////////////////////////
$cs-text-dark: $black;
$cs-text-light: $white;
$cs-text: $cs-text-dark;

//////////////////////////////
// Border Colors
//////////////////////////////
$cs-border: $gray;

//////////////////////////////
// Status Colors
//////////////////////////////
$cs-status-status: nth($quaternary-tints, 6);
$cs-status-warning: nth($secondary-tints, 2);
$cs-status-error: nth($tertiary-shades, 2);

//////////////////////////////
// Component defaults
//////////////////////////////
// Buttons
$cs-button-color-default: $gray;
//////////////////////////////
// Messages
$cs-message-text-color-default: nth($secondary-tints, 1);
$cs-message-bkg-color-default: $cs-status-status;
//////////////////////////////

$color-guide-medium: 500px !default;
$color-guide-large: 1050px !default;

@mixin generate-colour-guide($colours...) {
  $singleton: false;
  $length: 0;

  @if length($colours) == 1 and type-of(nth($colours, 1)) == 'list' {
    $colours: nth($colours, 1);
    $singleton: true;
    $length: length($colours);
  }
  @else if length($colours) > 0 {
    $length: length(nth($colours, 1));
  }

  @if length($colours) > 0 {
    .color-guide {
      ul {
        margin: 0;
        padding: 0;
      }

      li {
        list-style: none;
        height: 3.75em;
        position: relative;
        @include clearfix;

  // Small Color Guide
  display: block;
  width: 100%;

  // Medium Color Guide
  @include breakpoint($color-guide-medium $color-guide-large) {
    @include layout($length / 2, 0) {
      @include float-span(1);

      &:nth-child(#{$length / 2}n) {
        @include float-span(1, 'last');
      }
    }

    &:nth-child(#{$length}n) {
      margin-bottom: 1em;
    }
  }

  // Large Color Guide
  @include breakpoint($color-guide-large) {
    @include layout($length, 0) {
      @include float-span(1);

      &:nth-child(#{$length}n) {
        @include float-span(1, 'last');
      }
    }
        }

        &:before, &:after,
        &:nth-child(#{$length}n):before,
        &:nth-child(#{$length}n):after {
          position: absolute;
          height: 1.25em;
          width: 100%;
          @include box-sizing('border-box');
          margin: 0;
          padding: 0;
          left: 0;
          text-align: center;
        }

        &:before {
          top: .25em;
        }
        &:after {
          bottom: .25em;
        }

        @if $singleton == true {
          $i: 1;
          @each $colour in $colours {
            &:nth-child(#{$i}) {
              background-color: $colour;
              @include colour-name($colour, $i);
            }
            $i: $i+1;
          }
        }
        @else {
          $i: 1;
          @each $colour in $colours {
            $j: 1;
            @each $single in $colour {
              &:nth-child(#{$i}) {
                background-color: $single;
                @include colour-name($single, $j);
              }
              $j: $j+1;
              $i: $i+1;
            }
            $j: 1;
          }
        }

      }
    }
  }
}

@mixin generate-color-guide($colors...) {
  @include generate-colour-guide($colors);
}

@mixin colour-name($colour, $position) {
  $lightness: lightness($colour);

  $color: black;

  @if $lightness < 50% {
    $color: white;
  }

  &:before, &:after {
    color: $color;
  }
  &:before {
    content: '#{$colour}';
  }
  &:after {
    content: attr(data-sass);
  }
}
